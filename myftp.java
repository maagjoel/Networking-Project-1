/**
 * Martin Alvarez - 5856597
 * Victoria Lariot - 6124058
 */
import java.io.*;
import java.net.*;

public class myftp {
    private static final int SERVER_PORT = 21; // FTP port

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		String SERVER_IP = args[0]; // getting the IP address from the command line args

		Socket socket = new Socket(SERVER_IP, SERVER_PORT);

		// Creating input and output streams
		BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

		String serverResponse = input.readLine();
		System.out.println(serverResponse);

		// Code for login
		System.out.println("Enter FTP username: ");
		String username = "user " + keyboard.readLine();
		out.println(username);
		serverResponse = input.readLine();
		System.out.println(serverResponse);

		System.out.println("Enter FTP password: ");
		String password = "pass " + keyboard.readLine();
		out.println(password);
		serverResponse = input.readLine();
		System.out.println(serverResponse);

		// Once user successfully logs in, this runs
		while (true) {

			System.out.println("> ");
			String command = keyboard.readLine();

			// if command requires passive mode
			if (command.substring(0, 2).equals("ls") || command.substring(0, 3).equals("get")
					|| command.substring(0, 3).equals("put")) {
				out.println("PASV");
				serverResponse = input.readLine();
				System.out.println(serverResponse);

				// Calculating the port generated by PASV with a method we wrote called
				// getRemotePort
				int remotePort = getRemotePort(serverResponse);
				
				// Creating a new socket for Passive command connections
				Socket newSocket = new Socket(SERVER_IP, remotePort);
				
				// Creating input stream for this new connection
				BufferedReader newInput = new BufferedReader(new InputStreamReader(newSocket.getInputStream()));

				if (command.equals("ls")) {

					out.println("TYPE A");
					out.println("LIST");
					serverResponse = newInput.readLine();

					while (serverResponse != null) {
						System.out.println(serverResponse);
						serverResponse = newInput.readLine();

					}
					serverResponse = input.readLine();
					System.out.println(serverResponse);
					serverResponse = input.readLine();
					System.out.println(serverResponse);
					serverResponse = input.readLine();
					System.out.println(serverResponse);

				} else if (command.substring(0, 3).equals("get")) {

					String path = command.substring(4);
					out.println("RETR " + path);
					serverResponse = input.readLine();
					System.out.println(serverResponse);
					serverResponse = input.readLine();
					System.out.println(serverResponse);

				} else if (command.substring(0, 3).equals("put")) {

					String path = command.substring(4);
					out.println("STOR " + path);

					serverResponse = input.readLine();
					System.out.println(serverResponse);
					serverResponse = input.readLine();
					System.out.println(serverResponse);

				}

				// Closing the socket for passive commands
				newSocket.close();

			} else if (command.substring(0, 2).equals("cd")) {

				String path = command.substring(4);
				out.println("CWD " + path);
				serverResponse = input.readLine();
				System.out.println(serverResponse);

			} else if (command.substring(0, 4).equals("quit")) {
				out.println("QUIT");
				serverResponse = input.readLine();
				System.out.println(serverResponse);
				break;
			} else if (command.substring(0, 6).equals("delete")) {

				String path = command.substring(7);
				out.println("DELE " + path);
				serverResponse = input.readLine();
				System.out.println(serverResponse);
			}

		}

		socket.close();
		out.close();
		System.exit(1);

	}

	/**
	 * Method to calculate the remote port generated by the server when running PASV
	 * 
	 * @param serverResponse the message sent by server after running PASV
	 * @return an int that represents the port # server has reserved for you
	 */

	public static int getRemotePort(String serverResponse) {
		/* geting the 2 numbers for the client port # on server */
		String num1 = "";
		String num2 = "";
		int commaCounter = 0;
		for (int i = 0; i < serverResponse.length() - 1; i++) {

			if (commaCounter == 4) {
				while (serverResponse.charAt(i) != ',') {
					num1 += serverResponse.charAt(i);
					i++;
				}

			}
			if (commaCounter == 5) {
				while (serverResponse.charAt(i) != ')') {
					num2 += serverResponse.charAt(i);
					i++;
				}
			}

			if (serverResponse.charAt(i) == ',')
				commaCounter++;
		}
		int result = (Integer.parseInt(num1) * 256) + Integer.parseInt(num2);
		return result;
	}

}
